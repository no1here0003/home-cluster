pipeline {
    agent any

    parameters {
        string(name: 'environment', defaultValue: 'default', description: 'Workspace/environment file to use for deployment')
        string(name: 'version', defaultValue: '', description: 'Version variable to pass to Terraform')
        booleanParam(name: 'autoApprove', defaultValue: false, description: 'Automatically run apply after generating plan?')
    }
    
    environment {
        TF_IN_AUTOMATION      = '1'
    }

    stages {
        stage('Plan') {
            steps {
                script {
                    currentBuild.displayName = params.version
                }
                dir('./IaC/terraform') {
                    sh 'terraform init'
                    sh 'terraform workspace select vms1'
                    sh "terraform plan -destroy -out vms1.tfplan"
                    sh 'terraform show -no-color vms1.tfplan > tfplan.txt'
                    sh 'terraform show -no-color vms1.tfplan'
                    sh 'terraform workspace select vms2'
                    sh "terraform plan -destroy -out vms2.tfplan"
                    sh 'terraform show -no-color vms2.tfplan >> tfplan.txt'
                    sh 'terraform show -no-color vms2.tfplan'
                    sh 'terraform workspace select vms3'
                    sh "terraform plan -destroy -out vms3.tfplan"
                    sh 'terraform show -no-color vms3.tfplan >> tfplan.txt'
                    sh 'terraform show -no-color vms3.tfplan'
                    sh 'terraform workspace select vms4'
                    sh "terraform plan -destroy -out vms4.tfplan"
                    sh 'terraform show -no-color vms4.tfplan >> tfplan.txt'
                    sh 'terraform show -no-color vms4.tfplan'
                    sh 'terraform workspace select vms5'
                    sh "terraform plan -destroy -out vms5.tfplan"
                    sh 'terraform show -no-color vms5.tfplan >> tfplan.txt'
                    sh 'terraform show -no-color vms5.tfplan'
                }
            }
        }
        stage('Approval') {
            when {
                not {
                    equals expected: true, actual: params.autoApprove
                }
            }

            steps {
                script {
                    def plan = readFile 'IaC/terraform/tfplan.txt'
                    input message: "Do you want to apply the plan?",
                        parameters: [text(name: 'Plan', description: 'Please review the plan', defaultValue: plan)]
                }
            }
        }

            stage('Destroy vms1') {
                steps {
                    dir('IaC/terraform') {
                        sh 'terraform init'                            
                        sh 'terraform workspace select vms1'
                        sh "terraform destroy -auto-approve"
                    }
                }
            }
            stage('Destroy vms2') {
                  steps {
                    dir('IaC/terraform') {
                        sh 'terraform init'
                        sh 'terraform workspace select vms2'
                        sh "terraform destroy -auto-approve"
                    }
                }
            }
            stage('Destroy vms4') {
                steps {
                    dir('IaC/terraform') {
                        sh 'terraform init'
                        sh 'terraform workspace select vms4'
                        sh "terraform destroy -auto-approve"
                    }
                }
            }
            stage('Destroy vms5') {
                steps {
                     dir('IaC/terraform') {
                        sh 'terraform init'
                        sh 'terraform workspace select vms5'
                        sh "terraform destroy -auto-approve"
                    }
                }
            }
            stage('Destroy vms6') {
                steps {
                    dir('IaC/terraform') {
                        sh 'terraform init'
                        sh 'terraform workspace select vms6'
                        sh "terraform destroy -auto-approve"
                    }
                }
            }
        }
    post {
        always {
            archiveArtifacts artifacts: 'IaC/terraform/tfplan.txt'
        }
    }
}